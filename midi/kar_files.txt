Q: What is the MIDI Karaoke Type 1 (.KAR) file format?

A: A MIDI Karaoke file is a Standard MIDI File type 1 that contains a separate track with lyrics of the song entered as text events. Load one of the MIDI karaoke files into a sequencer to examine the contents of the tracks of the file. The first track contains text events that are used to make the file recognizable as the MIDI Karaoke file. @KMIDI KARAOKE FILE text event is used to for that purpose. The optional text event @V0100 denotes the format version number. Anything starting with @I is any information you want to include in the file.

The second track contains the text meta events for the lyrics of the song. The first event is @LENGL. It identifies the language of the song, in this case English. The next couple of events start with @T which identifies the title of the songs. You can have up to three events like these. The first event should contain the title of the song. Some programs (ex. Soft Karaoke) read this event to get the name of the song to be displayed in the File Open dialog box. The second event usually contains the performer or author of the song. The third event can contain any copyright information or anything else.

The rest of the second track contains the words of the song. Each event is the syllable that is supposed to be sung at the time of the event. If the text starts with \, it means to clear the screen and show the words at the top of the screen. If the text starts with /, it means to go to the next line.


 <meta message track_name name='Words' time=0>,
 <meta message text text='@LENGL' time=0>,
 <meta message text text='@TPENNY LANE' time=0>,
 <meta message text text='@TThe Beatles' time=0>,
 <meta message text text='@T(Lennon/McCartney)' time=0>,
 <meta message text text='\\In' time=1274>,
 <meta message text text=' Pen' time=62>,
 <meta message text text='ny' time=60>,
 <meta message text text=' Lane' time=68>,
 <meta message text text=' there' time=198>,
 <meta message text text=' is' time=66>,
 <meta message text text=' a' time=124>,
 <meta message text text=' bar' time=66>,
 <meta message text text='ber' time=120>,

'time' is ticks since last event
looks like 192 ticks per quarternote

* PITCH BEND SENSITIVITY:

For example, if you want to change the "pitch bend sensitivity" you would send the following control change messages:
101 0
100 0
  6 2
 38 0

The 101 and 100 messages indicate what parameter is to be changed. The 0 after each one comes from the parameter list above.
Changing only the 0 next to control change 100 to 1 would select "master fine tuning" as indicated in the parameter list above.
Then comes the 6 and 38 messages, which indicate what to do with the parameter pointed to by the 101 and 100 messages. In this
example we are changing the "pitch bend sensitivity", we are setting it to 2 (which is actually the default value). Note that
if the value next to control change 38 is 0, then you can safely omit the message - however I would recommend always including
it for completeness.

Pitch bend sensitivity is how much the currently sounding note(s), in the current MIDI channel, is/are affected by pitch bend.
The default value of 2 means that the maximum pitch bend will result in a pitch change of two semitones. (Above and below the
sounding note, meaning a total of four semitones from lowest to hightest pitch bend positions.)

The maximum sensitivity is twenty-four semitones (two octaves above and two below).
~~~~~~~~~~~~~~~~~~
The coarse adjustment (usually set via Data Entry 6) sets the range in semitones. The fine adjustment (usually set via Data Entry 38) s
et the range in cents. For example, to adjust the pitch wheel range to go up/down 2 semitones and 4 cents:

B0 65 00  Controller/chan 0, RPN coarse (101), Pitch Bend Range
B0 64 00  Controller/chan 0, RPN fine (100), Pitch Bend Range
B0 06 02  Controller/chan 0, Data Entry coarse, +/- 2 semitones
B0 26 04  Controller/chan 0, Data Entry fine, +/- 4 cents

